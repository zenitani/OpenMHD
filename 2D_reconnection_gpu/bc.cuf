!-----------------------------------------------------------------------
!     BC routines
!-----------------------------------------------------------------------

! BC for Ud
attributes(host) &
subroutine bc_for_U(U,ix,jx)
  implicit none
  include 'param.h'
  integer, intent(in) :: ix, jx
  real(8), device, intent(inout) :: U(ix,jx,var1)
  integer :: i, j
  
! west boundary
!$cuf kernel do <<<*, *>>>
  do j=1,jx
     U(1,j,ro) =  U(2,j,ro)
     U(1,j,mx) = -U(2,j,mx)
     U(1,j,my) =  U(2,j,my)
     U(1,j,mz) = -U(2,j,mz)
     U(1,j,en) =  U(2,j,en)
     U(1,j,bx) =  U(2,j,bx)
     U(1,j,by) = -U(2,j,by)
     U(1,j,bz) =  U(2,j,bz)
     U(1,j,ps) = -U(2,j,ps)
  enddo

! east boundary
!$cuf kernel do <<<*, *>>>
  do j=1,jx
     U(ix,j,ro) =  U(ix-1,j,ro)
     U(ix,j,mx) = -U(ix-1,j,mx)
     U(ix,j,my) =  U(ix-1,j,my)
     U(ix,j,mz) = -U(ix-1,j,mz)
     U(ix,j,en) =  U(ix-1,j,en)
     U(ix,j,bx) =  U(ix-1,j,bx)
     U(ix,j,by) = -U(ix-1,j,by)
     U(ix,j,bz) =  U(ix-1,j,bz)
     U(ix,j,ps) = -U(ix-1,j,ps)
  enddo

! south boundary
!$cuf kernel do <<<*, *>>>
  do i=1,ix
     U(i,1,ro) =  U(i,2,ro)
     U(i,1,mx) =  U(i,2,mx)
     U(i,1,my) = -U(i,2,my)
     U(i,1,mz) = -U(i,2,mz)
     U(i,1,en) =  U(i,2,en)
     U(i,1,bx) = -U(i,2,bx)
     U(i,1,by) =  U(i,2,by)
     U(i,1,bz) =  U(i,2,bz)
     U(i,1,ps) = -U(i,2,ps)
  enddo

! north boundary
!$cuf kernel do <<<*, *>>>
  do i=1,ix
     U(i,jx,ro) =  U(i,jx-1,ro)
     U(i,jx,mx) =  U(i,jx-1,mx)
     U(i,jx,my) = -U(i,jx-1,my)
     U(i,jx,mz) =  U(i,jx-1,mz)
     U(i,jx,en) =  U(i,jx-1,en)
     U(i,jx,bx) =  U(i,jx-1,bx)
     U(i,jx,by) = -U(i,jx-1,by)
     U(i,jx,bz) =  U(i,jx-1,bz)
     U(i,jx,ps) =  U(i,jx-1,ps)
  enddo

end subroutine bc_for_U


! BC for Fd -- VL/VR in the X direction
attributes(host) &
subroutine bc_for_F( VL,VR,ix,jx )
  implicit none
  include 'param.h'
  integer, intent(in) :: ix, jx
  real(8), device, intent(inout) :: VL(ix,jx,var1), VR(ix,jx,var1) ! interpolated states
  integer :: j
  
! west boundary
!$cuf kernel do <<<*, *>>>
  do j=1,jx
     VL(1,j,ro) =  VR(1,j,ro)
     VL(1,j,vx) = -VR(1,j,vx)
     VL(1,j,vy) =  VR(1,j,vy)
     VL(1,j,vz) = -VR(1,j,vz)
     VL(1,j,pr) =  VR(1,j,pr)
     VL(1,j,bx) =  VR(1,j,bx)
     VL(1,j,by) = -VR(1,j,by)
     VL(1,j,bz) =  VR(1,j,bz)
     VL(1,j,ps) = -VR(1,j,ps)
  enddo

! east boundary
!$cuf kernel do <<<*, *>>>
  do j=1,jx
     VR(ix-1,j,ro) =  VL(ix-1,j,ro)
     VR(ix-1,j,vx) = -VL(ix-1,j,vx)
     VR(ix-1,j,vy) =  VL(ix-1,j,vy)
     VR(ix-1,j,vz) = -VL(ix-1,j,vz)
     VR(ix-1,j,pr) =  VL(ix-1,j,pr)
     VR(ix-1,j,bx) =  VL(ix-1,j,bx)
     VR(ix-1,j,by) = -VL(ix-1,j,by)
     VR(ix-1,j,bz) =  VL(ix-1,j,bz)
     VR(ix-1,j,ps) = -VL(ix-1,j,ps)
  enddo

end subroutine bc_for_F


! BC for Gd -- VL/VR in the Y direction
attributes(host) &
subroutine bc_for_G( VL,VR,ix,jx )
  implicit none
  include 'param.h'
  integer, intent(in) :: ix, jx
  real(8), device, intent(inout) :: VL(ix,jx,var1), VR(ix,jx,var1) ! interpolated states
  integer :: i
  
! south boundary
!$cuf kernel do <<<*, *>>>
  do i=1,ix
     VL(i,1,ro) =  VR(i,1,ro)
     VL(i,1,vx) =  VR(i,1,vx)
     VL(i,1,vy) = -VR(i,1,vy)
     VL(i,1,vz) = -VR(i,1,vz)
     VL(i,1,pr) =  VR(i,1,pr)
     VL(i,1,bx) = -VR(i,1,bx)
     VL(i,1,by) =  VR(i,1,by)
     VL(i,1,bz) =  VR(i,1,bz)
     VL(i,1,ps) = -VR(i,1,ps)
  enddo

! north boundary
!$cuf kernel do <<<*, *>>>
  do i=1,ix
     VR(i,jx-1,ro) =  VL(i,jx-1,ro)
     VR(i,jx-1,vx) =  VL(i,jx-1,vx)
     VR(i,jx-1,vy) = -VL(i,jx-1,vy)
     VR(i,jx-1,vz) =  VL(i,jx-1,vz)
     VR(i,jx-1,pr) =  VL(i,jx-1,pr)
     VR(i,jx-1,bx) =  VL(i,jx-1,bx)
     VR(i,jx-1,by) = -VL(i,jx-1,by)
     VR(i,jx-1,bz) =  VL(i,jx-1,bz)
     VR(i,jx-1,ps) =  VL(i,jx-1,ps)
  enddo

end subroutine bc_for_G
