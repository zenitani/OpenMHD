program main
!-----------------------------------------------------------------------
!     OpenMHD  Riemann solver
!-----------------------------------------------------------------------
!     2010/09/18  S. Zenitani  2D LLF/HLL/HLLC-G/HLLD solver
!     2010/09/25  S. Zenitani  Hyperbolic divergence cleaning
!     2020/07/04  S. Zenitani  CUDA fortran version
!-----------------------------------------------------------------------
  use cudafor
  use parallel
  implicit none
  include 'param.h'
  integer, parameter :: ix = 200 + 2
  integer, parameter :: jx = 200 + 2
  integer, parameter :: mpi_nums(2)       = (/2, 2/)  ! MPI numbers
  logical, parameter :: bc_periodicity(2) = (/.true., .true./)
  integer, parameter :: loop_max = 3000000
  real(8), parameter :: dtmin = 1.0d-7
  real(8), parameter :: tend  = 4.0d0
  real(8), parameter :: dtout = 0.1d0 ! output interval
  real(8), parameter :: cfl   = 0.4d0 ! time step
! If non-zero, restart from a previous file. If negative, find a restart file backword in time.
  integer :: n_start = 0
! Slope limiter  (0: flat, 1: minmod, 2: MC, 3: van Leer, 4: Koren)
  integer, parameter :: lm_type   = 1
! Numerical flux (0: LLF, 1: HLL, 2: HLLC, 3: HLLD)
  integer, parameter :: flux_type = 3
! Time marching  (0: TVD RK2, 1: RK2)
  integer, parameter :: time_type = 0
! File I/O  (0: Standard, 1: MPI-IO)
  integer, parameter :: io_type   = 1
!-----------------------------------------------------------------------
  real(8) :: x(ix), y(jx), dx
  real(8) :: U(ix,jx,var1)  ! conserved variables (U)
  real(8) :: V(ix,jx,var2)  ! primitive variables (V)
!-----------------------------------------------------------------------
  real(8), device, allocatable :: Ud(:,:,:)  ! conserved variables (U)
  real(8), device, allocatable :: U1d(:,:,:) ! conserved variables: medium state (U*)
  real(8), device, allocatable :: Vd(:,:,:)  ! primitive variables (V)
  real(8), device, allocatable :: VLd(:,:,:), VRd(:,:,:) ! interpolated states
  real(8), device, allocatable :: Fd(:,:,:), Gd(:,:,:)   ! numerical flux (F,G)
  real(8), device :: dtd, dxd, chd
  integer :: stat
  type(dim3), parameter :: Th = dim3(64,1,1)
  type(dim3), parameter :: Bl = dim3(ceiling(real(ix)/Th%x),ceiling(real(jx)/Th%y),1)
!-----------------------------------------------------------------------
  integer :: i, j, k
  integer :: n_loop,n_output
  real(8) :: t, dt, t_output
  real(8) :: ch
  character*256 :: filename
  integer :: merr, myrank, mreq(2)   ! for MPI
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
! for MPI
  call parallel_init(mpi_nums,bc_periodicity,ix,jx)
  myrank = ranks%myrank
!-----------------------------------------------------------------------
  allocate( Ud(ix,jx,var1),U1d(ix,jx,var1),Vd(ix,jx,var2))
  allocate(VLd(ix,jx,var1),VRd(ix,jx,var1))
  allocate( Fd(ix,jx,var1), Gd(ix,jx,var1))
!-----------------------------------------------------------------------

  t    =  0.d0
  dt   =  0.d0
  call modelp(U,V,x,y,dx,ix,jx)
  Ud = U; Vd = V; dxd = dx
! boundary conditions
  call parallel_exchange(Ud,ix,jx,1) ! in the x direction
  call parallel_exchange(Ud,ix,jx,2) ! in the y direction
  call fastest_speed<<<Bl,Th>>>(Ud,Vd,VRd(:,:,vx),ix,jx)
  chd = 0.d0
!$cuf kernel do(2) <<<*, *, stream=0>>> reduction(max:chd)
  do j=2,jx-1; do i=2,ix-1
     chd=max(chd,VRd(i,j,vx))
  enddo; enddo
  ch = chd
  call mpi_iallreduce(mpi_in_place,ch,1,mpi_real8,mpi_max,cart2d%comm,mreq(1),merr)
  call mpi_waitall(1,mreq,mpi_statuses_ignore,merr)
  call mpi_barrier(cart2d%comm,merr)

  dt = cfl * dx / ch
  if( dt < dtmin ) then
     write(6,*) ' dt is too small : ', dt, ' < ', dtmin
     write(6,*) '     velocity is : ', ch
     stop
  endif
  if ( dt > dtout ) then
     write(6,*) 'error: ', dt, '>', dtout
     stop
  endif
  if( myrank == 0 ) then
     write(6,*) '[Params]'
     write(6,997) version, ranks%size, cart2d%sizes
     write(6,998) dt, dtout, cart2d%sizes(1)*(ix-2)+2, ix, cart2d%sizes(2)*(jx-2)+2, jx
     write(6,999) lm_type, flux_type, time_type
997  format ('Code version: ', i8, '  MPI node # : ', i5,' (',i4,' x ',i4,')' )
998  format (' dt:', 1p, e10.3, ' dtout:', 1p, e10.3, ' grids:',i6,' (',i5,') x ',i6,' (',i5,') ')
999  format (' limiter: ', i1, '  flux: ', i1, '  time-marching: ', i1 )
     write(6,*) '== start =='
  endif

  ! If n_start is negative, look for a latest restart file.
  if ( n_start < 0 ) then
     if ( myrank == 0 ) then
        do k = floor(tend/dtout),0,-1
           n_start = k
           if ( io_type == 0 )  write(filename,990) myrank, n_start
           if ( io_type /= 0 )  write(filename,980) n_start
           open(15,file=filename,form='unformatted',access='stream',status='old',err=100)
           close(15)
           exit
100        continue
        enddo
     endif
     call mpi_bcast(n_start,1,mpi_integer,0,cart2d%comm,merr)
  endif
  call mpi_barrier(cart2d%comm,merr)

  ! If n_start is non-zero, restart from a previous file.
  if ( n_start == 0 ) then
     n_output = 0
     t_output = -dt/3.d0
  else
     if ( io_type == 0 ) then
        write(6,*) 'reading data ...   rank = ', myrank
        write(filename,990) myrank, n_start
        call fileio_input(filename,ix,jx,t,x,y,U)
     else
        if( myrank == 0 )  write(6,*) 'reading data ...'
        write(filename,980) n_start
        call mpiio_input(filename,ix,jx,t,x,y,U)
     endif
     Ud = U
     n_output = n_start + 1
     t_output = t + dtout
  endif

!-----------------------------------------------------------------------
  do n_loop=1,loop_max

     if( myrank == 0 ) then
        write(6,*) ' t = ', t
     endif
!    Recovering primitive variables
!     write(6,*) 'U --> V'
     call u2v<<<Bl,Th>>>(Ud,Vd,ix,jx)
!   -----------------
!    [ output ]
     if ( t >= t_output ) then
        U = Ud; V = Vd
        if (( n_loop > 1 ).or.( n_start == 0 )) then
           if ( io_type == 0 ) then
              write(6,*) 'writing data ...   t = ', t, ' rank = ', myrank
              write(filename,990) myrank, n_output
              call fileio_output(filename,ix,jx,t,x,y,U,V)
           else
              if( myrank == 0 )  write(6,*) 'writing data ...   t = ', t
              write(filename,980) n_output
              call mpiio_output(filename,ix,jx,t,x,y,U,V)
           endif
        endif
        n_output = n_output + 1
        t_output = t_output + dtout
        call mpi_barrier(cart2d%comm,merr)
     endif
!    [ end? ]
     if ( t >= tend )  exit
     if ( n_loop >= loop_max ) then
        write(6,*) 'max loop'
        exit
     endif
!   -----------------
!    CFL condition
     call fastest_speed<<<Bl,Th>>>(Ud,Vd,VRd(:,:,vx),ix,jx)
     chd = 0.d0
!$cuf kernel do(2) <<<*, *, stream=0>>> reduction(max:chd)
     do j=2,jx-1; do i=2,ix-1
        chd=max(chd,VRd(i,j,vx))
     enddo; enddo
     ch = chd
     call mpi_iallreduce(mpi_in_place,ch,1,mpi_real8,mpi_max,cart2d%comm,mreq(1),merr)
     call mpi_waitall(1,mreq,mpi_statuses_ignore,merr)
     dt = cfl * dx / ch
     if( dt < dtmin ) then
        write(6,*) ' dt is too small : ', dt, ' < ', dtmin
        write(6,*) '     velocity is : ', ch
        stop
     endif
     dtd = dt; chd = ch
!   -----------------

!    GLM solver for the first half timestep
!    This should be done after set_dt()
     call glm_ss2<<<Bl,Th>>>(Ud,chd,dtd,ix,jx)
     
!    Slope limiters on primitive variables
!     write(6,*) 'V --> VL, VR (F)'
     call limiter<<<Bl,Th>>>(Vd(:,:,vx),VLd(:,:,vx),VRd(:,:,vx),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vy),VLd(:,:,vy),VRd(:,:,vy),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vz),VLd(:,:,vz),VRd(:,:,vz),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,pr),VLd(:,:,pr),VRd(:,:,pr),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,ro),VLd(:,:,ro),VRd(:,:,ro),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,bx),VLd(:,:,bx),VRd(:,:,bx),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,by),VLd(:,:,by),VRd(:,:,by),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,bz),VLd(:,:,bz),VRd(:,:,bz),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,ps),VLd(:,:,ps),VRd(:,:,ps),ix,jx,1,lm_type)

!    fix VL/VR for periodic bc (F)
!     write(6,*) 'bc'
     call parallel_exchange2(VLd,VRd,ix,jx,1) ! in the x direction

!    Numerical flux in the X direction (F)
!     write(6,*) 'VL, VR --> F'
     call flux_solver<<<Bl,Th>>>(Fd,VLd,VRd,chd,ix,jx,1,flux_type)

!    Slope limiters on primitive variables
!     write(6,*) 'V --> VL, VR (G)'
     call limiter<<<Bl,Th>>>(Vd(:,:,vx),VLd(:,:,vx),VRd(:,:,vx),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vy),VLd(:,:,vy),VRd(:,:,vy),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vz),VLd(:,:,vz),VRd(:,:,vz),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,pr),VLd(:,:,pr),VRd(:,:,pr),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,ro),VLd(:,:,ro),VRd(:,:,ro),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,bx),VLd(:,:,bx),VRd(:,:,bx),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,by),VLd(:,:,by),VRd(:,:,by),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,bz),VLd(:,:,bz),VRd(:,:,bz),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Ud(:,:,ps),VLd(:,:,ps),VRd(:,:,ps),ix,jx,2,lm_type)

!    fix VL/VR for periodic bc (G)
     call parallel_exchange2(VLd,VRd,ix,jx,2) ! in the y direction

!    Numerical flux in the Y direction (G)
!     write(6,*) 'VL, VR --> G'
     call flux_solver<<<Bl,Th>>>(Gd,VLd,VRd,chd,ix,jx,2,flux_type)

     if( time_type == 0 ) then
!       write(6,*) 'U* = U + (dt/dx) (F-F)'
        call rk_tvd21<<<Bl,Th>>>(Ud,U1d,Fd,Gd,dtd,dxd,ix,jx)
     elseif( time_type == 1 ) then
!       write(6,*) 'U*(n+1/2) = U + (0.5 dt/dx) (F-F)'
        call rk_std21<<<Bl,Th>>>(Ud,U1d,Fd,Gd,dtd,dxd,ix,jx)
     endif

!    boundary condition
     call parallel_exchange(U1d,ix,jx,1) ! in the x direction
     call parallel_exchange(U1d,ix,jx,2) ! in the y direction
!     write(6,*) 'U* --> V'
     call u2v<<<Bl,Th>>>(U1d,Vd,ix,jx)

!    Slope limiters on primitive variables
!     write(6,*) 'V --> VL, VR (F)'
     call limiter<<<Bl,Th>>>(Vd(:,:,vx),VLd(:,:,vx),VRd(:,:,vx),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vy),VLd(:,:,vy),VRd(:,:,vy),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vz),VLd(:,:,vz),VRd(:,:,vz),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,pr),VLd(:,:,pr),VRd(:,:,pr),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,ro),VLd(:,:,ro),VRd(:,:,ro),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,bx),VLd(:,:,bx),VRd(:,:,bx),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,by),VLd(:,:,by),VRd(:,:,by),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,bz),VLd(:,:,bz),VRd(:,:,bz),ix,jx,1,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,ps),VLd(:,:,ps),VRd(:,:,ps),ix,jx,1,lm_type)

!    fix VL/VR for periodic bc (F)
     call parallel_exchange2(VLd,VRd,ix,jx,1) ! in the x direction

!    Numerical flux in the X direction (F)
!     write(6,*) 'VL, VR --> F'
     call flux_solver<<<Bl,Th>>>(Fd,VLd,VRd,chd,ix,jx,1,flux_type)

!    Slope limiters on primitive variables
!     write(6,*) 'V --> VL, VR (G)'
     call limiter<<<Bl,Th>>>(Vd(:,:,vx),VLd(:,:,vx),VRd(:,:,vx),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vy),VLd(:,:,vy),VRd(:,:,vy),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,vz),VLd(:,:,vz),VRd(:,:,vz),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(Vd(:,:,pr),VLd(:,:,pr),VRd(:,:,pr),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,ro),VLd(:,:,ro),VRd(:,:,ro),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,bx),VLd(:,:,bx),VRd(:,:,bx),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,by),VLd(:,:,by),VRd(:,:,by),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,bz),VLd(:,:,bz),VRd(:,:,bz),ix,jx,2,lm_type)
     call limiter<<<Bl,Th>>>(U1d(:,:,ps),VLd(:,:,ps),VRd(:,:,ps),ix,jx,2,lm_type)

!    fix VL/VR for periodic bc (G)
     call parallel_exchange2(VLd,VRd,ix,jx,2) ! in the y direction

!    Numerical flux in the Y direction (G)
!     write(6,*) 'VL, VR --> G'
     call flux_solver<<<Bl,Th>>>(Gd,VLd,VRd,chd,ix,jx,2,flux_type)

     if( time_type == 0 ) then
!       write(6,*) 'U_new = 0.5( U_old + U* + F dt )'
        call rk_tvd22<<<Bl,Th>>>(Ud,U1d,Fd,Gd,dtd,dxd,ix,jx)
     elseif( time_type == 1 ) then
!       write(6,*) 'U_new = U + (dt/dx) (F-F) (n+1/2)'
        call rk_std22<<<Bl,Th>>>(Ud,Fd,Gd,dtd,dxd,ix,jx)
     endif

!    boundary conditions
     call parallel_exchange(Ud,ix,jx,1) ! in the x direction
     call parallel_exchange(Ud,ix,jx,2) ! in the y direction

!    GLM solver for the second half timestep
     call glm_ss2<<<Bl,Th>>>(Ud,chd,dtd,ix,jx)

     t = t + dt

  enddo
!-----------------------------------------------------------------------

  call parallel_finalize()
  deallocate(Ud,U1d,Vd,VLd,VRd,Fd,Gd)
  if( myrank == 0 )  write(6,*) '== end =='


980 format ('data/field-',i5.5,'.dat')
990 format ('data/field-rank',i5.5,'-',i5.5,'.dat')
!981 format ('data/field-',i5.5,'.dat.restart')
!991 format ('data/field-rank',i5.5,'-',i5.5,'.dat.restart')

end program main
!-----------------------------------------------------------------------
